name: Release Static Binaries

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  parse_release_info:
    name: Parse Release Info from PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.body, '#release')
    outputs:
      should_release: ${{ steps.get_tag.outputs.should_release }}
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Get tag from PR body
        id: get_tag
        run: |
          TAG=$(echo "${{ github.event.pull_request.body }}" | grep -oP '#release\s+\K(v[0-9]+\.[0-9]+\.[0-9]+)')
          if [ -n "$TAG" ]; then
            echo "Found release tag: $TAG"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "No release tag found in PR body. Skipping release."
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Static for ${{ matrix.target }}
    needs: parse_release_info
    if: needs.parse_release_info.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            binary_name: leaf
            archive_name: leaf-linux-x86_64.tar.gz
          - target: aarch64-unknown-linux-musl
            binary_name: leaf
            archive_name: leaf-linux-aarch64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust with musl targets
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        
        # For aarch64 cross-compilation
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Cache cargo registry, index, and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build static binary
      env:
        CC_aarch64_unknown_linux_musl: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
      run: |
        cargo build --release --target ${{ matrix.target }}
        
        # Verify it's statically linked
        echo "Checking binary dependencies:"
        if command -v ldd >/dev/null; then
          ldd target/${{ matrix.target }}/release/${{ matrix.binary_name }} || echo "Static binary confirmed (no dynamic dependencies)"
        fi
        
        # Show binary size
        echo "Binary size:"
        ls -lh target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive
      run: |
        mkdir staging
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} staging/
        cd staging && tar -czf ../${{ matrix.archive_name }} .
        cd ..
        echo "Archive created: ${{ matrix.archive_name }}"
        echo "Archive size: $(du -h ${{ matrix.archive_name }} | cut -f1)"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: ${{ matrix.archive_name }}
        retention-days: 1

  release:
    name: Create GitHub Release
    needs: [parse_release_info, build]
    if: needs.parse_release_info.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.parse_release_info.outputs.tag }}
        name: Release ${{ needs.parse_release_info.outputs.tag }}
        files: ./artifacts/**/*.* 
        body: |
          ## Leaf Package Manager ${{ needs.parse_release_info.outputs.tag }}

          A simple, sudo-free package manager for Linux, written in Rust.
          
          **These are statically linked binaries with no system dependencies.**

          ### Installation

          **Linux (any distribution):**
          ```bash
          curl -sSL https://raw.githubusercontent.com/ktauchathuranga/leaf/main/install.sh | bash
          ```
          
          Or with wget:
          ```bash
          wget -qO- https://raw.githubusercontent.com/ktauchathuranga/leaf/main/install.sh | bash
          ```

          ### Supported Architectures
          - x86_64 (Intel/AMD 64-bit) - Static binary
          - aarch64 (ARM 64-bit) - Static binary

          ### Features
          - No system dependencies required
          - Works on any Linux distribution
          - Minimal container compatible (even scratch/distroless)

          ### Changes in this release
          See merged pull requests for details.
        draft: false
        prerelease: false
